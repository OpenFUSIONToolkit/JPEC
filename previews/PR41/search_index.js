var documenterSearchIndex = {"docs":
[{"location":"set_up/#Setting-up-JPEC","page":"Setting up JPEC","title":"Setting up JPEC","text":"","category":"section"},{"location":"set_up/","page":"Setting up JPEC","title":"Setting up JPEC","text":"Setting up JPEC\nOn Windows via WSL (Ubuntu)\nOn macOS","category":"page"},{"location":"set_up/#On-Windows-via-WSL-(Ubuntu)","page":"Setting up JPEC","title":"On Windows via WSL (Ubuntu)","text":"","category":"section"},{"location":"set_up/","page":"Setting up JPEC","title":"Setting up JPEC","text":"Install WSL and Ubuntu If you don't already have WSL and Ubuntu installed, set this up. This page gives detailed instructions on how to complete the installation. In the Windows Powershell,\nMake sure WSL is installed:   PowerShell   wsl --install\nSet Ubuntu as your default WSL distro:   PowerShell   wsl --set-default Ubuntu\nLaunch Ubuntu and update:   PowerShell   sudo apt update && sudo apt upgrade -y\nInstall build tools in WSL  Powershell  sudo apt install build-essential gfortran cmake -y\nbuild-essential → GCC, make\ngfortran → Fortran compiler\ncmake → sometimes needed by dependencies\nInstall Julia in WSL\nDownload the latest Linux tarball from the official site Julia downloads. It will look like  shell   wget https://julialang-s3.julialang.org/bin/linux/x64/1.11/julia-1.11.3-linux-x86_64.tar.gz\n☆ Replace the URL with the latest stable version.\nExtract and move it to /opt (or any path):\nshell  tar -xvzf julia-1.11.3-linux-x86_64.tar.gz  sudo mv julia-1.11.3 /opt/\n☆ Ensure these commands match the tarball you installed. These commands match the above tarball and might need to be modified for you installation.\nAdd Julia to PATH:\nshell   echo 'export PATH=/opt/julia-1.11.3/bin:$PATH' >> ~/.bashrc  source ~/.bashrc\nTest it is properly installed\nshell  julia --version\nInstall Python/Jupyter in WSL \nThis step is only really required if you want to run the .ipynb test notebooks.\nTo install Python3 and Jupyter notebooks, use these commands   shell   sudo apt install python3-pip python3-venv -y   python3 -m pip install --user jupyter jupyterlab notebook ipykernel\n⚠ Important: Add local Python scripts to PATH:\n ``` shell\n echo 'export PATH=$HOME/.local/bin:$PATH' >> ~/.bashrc\n source ~/.bashrc\n ```\nVerify it is properly installed\nshell  jupyter --version\nClone or move JPEC into WSL home folder.","category":"page"},{"location":"set_up/","page":"Setting up JPEC","title":"Setting up JPEC","text":"It’s recommended to avoid OneDrive for builds (slower, permission issues):     shell     cp -r /mnt/c/Users/<Username>/<Path>/JPEC ~/JPEC     cd ~/JPEC","category":"page"},{"location":"set_up/","page":"Setting up JPEC","title":"Setting up JPEC","text":"Where `<Username>/<Path>` is replaced with the path to the JPEC file you cloned to your local machine.\n\n**OR**\n\nAlternatively you can clone it from GitHub directly to your virtual machine.\n\n``` shell\ngit clone https://github.com/OpenFUSIONToolkit/JPEC.git\ncd JPEC\n```\n\nTechnically, you can use the don't have to copy it from your local installation and you can just `cd mnt/c/Users/<Username>/<Path>/JPEC`, but this in not recommended.","category":"page"},{"location":"set_up/","page":"Setting up JPEC","title":"Setting up JPEC","text":"Build Fortran dependencies (libspline.so)\nGo to the spline source folder:  shell  cd ~/JPEC/src/Splines/fortran\nEdit Makefile for Linux/WSL compatibility. SInce many of the current developers use macOS systems, the Makefile is set up for macOS. In the makefile (JPEC/src/Splines/fortran/makefile), set  Makefile  LIBS ?=\ninstead of   Makefile  LIBS ?=\nwhich only works for macOS. Additionally .dylib is a file type that is not recognized on Linux, instead Linux uses .so files. So, add   Makefile  LIBSUFFIX ?= .so\nto the makefile in place of   Makefile  LIBSUFFIX ?= .dylib  the Mac version.\n⚠ Important: Be careful not to commit changes to the makefile as most developers use macOS.","category":"page"},{"location":"set_up/","page":"Setting up JPEC","title":"Setting up JPEC","text":"3. Back in the shell, clean previous builds using\n    ``` shell\n    make clean\n    ```\n\n4. Build\n    ``` shell\n    make\n    ```\n\n5. Verify the library exists using\n    ``` shell\n    ls ../../../deps/libspline.so\n    ```","category":"page"},{"location":"set_up/","page":"Setting up JPEC","title":"Setting up JPEC","text":"Export library path so Julia can find it   shell   export LD_LIBRARY_PATH=~/JPEC/deps:$LD_LIBRARY_PATH\nOptional: add to ~/.bashrc for persistence.\nInstall the Julia packages for JPEC","category":"page"},{"location":"set_up/","page":"Setting up JPEC","title":"Setting up JPEC","text":"1. Launch Julia:\n    ``` shell\n    julia\n    ```\n2. In Julia REPL:\n    ``` julia\n    using Pkg\n    Pkg.instantiate()       # install recorded dependencies\n    Pkg.add(\"Preferences\")  # install missing dependency if needed\n    Pkg.build(\"IJulia\")     # rebuild kernel\n    Pkg.precompile()        # precompile all packages - probably unnecessary \n    ```","category":"page"},{"location":"set_up/","page":"Setting up JPEC","title":"Setting up JPEC","text":"At this point, you should be able to run the code, open a .ipynb notebook, or connect VS Code to your WSL session.\nTo open a .ipynb notebook\nLaunch Jupyter from WSL, make sure you have exited Julia using the exit() command and then type in the shell\nshell  jupyter notebook --no-browser  It will print a URL with a token.\nCopy the URL into your Windows browser OR open the notebook in VS Code using the Remote - WSL extension.\n(Optionally) Integrate WSL with VS Code\nInstall Remote - WSL extension in VS Code.\nOpen VS Code → Connect To → Connect to WSL.\nClick Open Folder and then navigate to the JPEC folder on your VM. Open your JPEC folder from WSL: ~/JPEC.\nIf this is not working, you can launch vscode from the WSL shell you have using the command code .\nOpen a terminal inside VS Code — it will automatically use WSL/Ubuntu.\nYou can now run:  shell  make        # rebuild libspline.so if needed  julia       # run scripts  jupyter notebook --no-browser\nVS Code also lets you open .ipynb notebooks in the WSL environment using the Jupyter extension. Click the \"Select Kernel\" button in the top right hand of the .ipynb file and select the Julia kernel installed in WSL.All dependencies (libspline.so, Julia packages) are accessible.\nRun JPEC\nMake sure you are in WSL terminal, with LD_LIBRARY_PATH set to include deps.\nLaunch Julia and run your scripts as usual:  shell  include(\"path/to/jpec_script.jl\")","category":"page"},{"location":"set_up/#On-macOS","page":"Setting up JPEC","title":"On macOS","text":"","category":"section"},{"location":"splines/#Splines-Module","page":"Splines","title":"Splines Module","text":"","category":"section"},{"location":"splines/","page":"Splines","title":"Splines","text":"The Splines module provides cubic, bicubic, and fourier spline interpolation functionality, used for smooth representation of MHD equilibria.","category":"page"},{"location":"splines/#Overview","page":"Splines","title":"Overview","text":"","category":"section"},{"location":"splines/","page":"Splines","title":"Splines","text":"The module includes:","category":"page"},{"location":"splines/","page":"Splines","title":"Splines","text":"Cubic spline interpolation for 1D data\nBicubic spline interpolation for 2D data\nFourier spline interpolation for decomposed data\nDerivative evaluation capabilities\nSupport for both real and complex-valued data","category":"page"},{"location":"splines/#API-Reference","page":"Splines","title":"API Reference","text":"","category":"section"},{"location":"splines/#Types","page":"Splines","title":"Types","text":"","category":"section"},{"location":"splines/#CubicSplineType","page":"Splines","title":"CubicSplineType","text":"","category":"section"},{"location":"splines/","page":"Splines","title":"Splines","text":"Represents a cubic spline interpolation object.","category":"page"},{"location":"splines/#BicubicSplineType","page":"Splines","title":"BicubicSplineType","text":"","category":"section"},{"location":"splines/","page":"Splines","title":"Splines","text":"Represents a bicubic spline interpolation object for 2D data.","category":"page"},{"location":"splines/#FourierSplineType","page":"Splines","title":"FourierSplineType","text":"","category":"section"},{"location":"splines/","page":"Splines","title":"Splines","text":"Represents a Fourier spline interpolation object for decomposed data.","category":"page"},{"location":"splines/#Functions","page":"Splines","title":"Functions","text":"","category":"section"},{"location":"splines/#spline_setup","page":"Splines","title":"spline_setup","text":"","category":"section"},{"location":"splines/#JPEC.SplinesMod.CubicSpline.spline_setup","page":"Splines","title":"JPEC.SplinesMod.CubicSpline.spline_setup","text":"spline_setup(xs, fs, bctype=1)\n\nSet up a cubic spline interpolation.\n\nArguments\n\nxs: A vector of Float64 values representing the x-coordinates (must be monotonically increasing)\nfs: A vector or matrix of Float64/ComplexF64 values representing the function values at the x-coordinates\nbctype: An integer specifying the boundary condition type (default is 1):\n1: Natural spline (zero second derivative at endpoints)\n2: Periodic spline\n3: Extrapolated spline\n4: Not-a-knot spline\n\nReturns\n\nA CubicSplineType object that can be used for evaluation\n\nExamples\n\n# 1D spline\nxs = collect(range(0.0; stop=2π, length=21))\nfs = sin.(xs)\nspline = spline_setup(xs, fs, 1)\n\n# Multi-quantity spline\nfs_matrix = hcat(sin.(xs), cos.(xs))\nspline = spline_setup(xs, fs_matrix, 1)\n\n\n\n\n\n","category":"function"},{"location":"splines/#spline_eval","page":"Splines","title":"spline_eval","text":"","category":"section"},{"location":"splines/#JPEC.SplinesMod.CubicSpline.spline_eval","page":"Splines","title":"JPEC.SplinesMod.CubicSpline.spline_eval","text":"spline_eval(spline, x, derivs=0)\n\nEvaluate a cubic spline at given points.\n\nArguments\n\nspline: A CubicSplineType object created by spline_setup\nx: A Float64 value or vector of Float64 values representing the x-coordinates to evaluate\nderivs: Integer specifying derivative level (default is 0):\n0: Function values only\n1: Function values and first derivatives\n2: Function values, first and second derivatives\n\nReturns\n\nIf derivs=0: Matrix of function values (length(x) × nqty)\nIf derivs=1: Tuple of (values, first_derivatives)\nIf derivs=2: Tuple of (values, firstderivatives, secondderivatives)\n\nExamples\n\n# Evaluate at single point\nspline = spline_setup(xs, fs, 1)\nf_vals = spline_eval(spline, π / 2)\n\n# Evaluate at multiple points\nx_eval = [π / 4, π / 2, 3π / 4]\nf_vals = spline_eval(spline, x_eval)\n\n# Get derivatives\nf_vals, f_derivs = spline_eval(spline, x_eval, 1)\n\n\n\n\n\n","category":"function"},{"location":"splines/#bicube_setup","page":"Splines","title":"bicube_setup","text":"","category":"section"},{"location":"splines/#JPEC.SplinesMod.BicubicSpline.bicube_setup","page":"Splines","title":"JPEC.SplinesMod.BicubicSpline.bicube_setup","text":"bicube_setup(xs, ys, fs, bctypex=1, bctypey=1)\n\nSet up a bicubic spline interpolation for 2D data.\n\nArguments\n\nxs: Vector of Float64 values representing the x-coordinates (must be monotonically increasing)\nys: Vector of Float64 values representing the y-coordinates (must be monotonically increasing)\nfs: 3D array of Float64 values with dimensions (nx, ny, nqty) representing function values\nbctypex: Boundary condition type for x-direction (default is 1)\nbctypey: Boundary condition type for y-direction (default is 1)\n1: Natural spline (zero second derivative at boundaries)\n2: Periodic spline\n3: Extrapolated spline\n4: Not-a-knot spline\n\nReturns\n\nA BicubicSplineType object that can be used for 2D evaluation\n\nExamples\n\n# Create 2D grid\nxs = collect(range(0.0; stop=2π, length=20))\nys = collect(range(0.0; stop=2π, length=20))\n\n# Create 3D function data array\nfs = zeros(20, 20, 1)\nfor i in 1:20, j in 1:20\n    fs[i, j, 1] = sin(xs[i]) * cos(ys[j])\nend\n\n# Set up bicubic spline\nbcspline = bicube_setup(xs, ys, fs, 1, 1)\n\n\n\n\n\n","category":"function"},{"location":"splines/#bicube_eval","page":"Splines","title":"bicube_eval","text":"","category":"section"},{"location":"splines/#JPEC.SplinesMod.BicubicSpline.bicube_eval","page":"Splines","title":"JPEC.SplinesMod.BicubicSpline.bicube_eval","text":"bicube_eval(bicube, x, y, derivs=0)\n\nEvaluate a bicubic spline at given 2D points.\n\nArguments\n\nbicube: A BicubicSplineType object created by bicube_setup\nx: Float64 value or vector of x-coordinates to evaluate\ny: Float64 value or vector of y-coordinates to evaluate\nderivs: Integer specifying derivative level (default is 0):\n0: Function values only\n1: Function values and first derivatives (∂f/∂x, ∂f/∂y)\n2: Function values, first and second derivatives (∂f/∂x, ∂f/∂y, ∂²f/∂x², ∂²f/∂x∂y, ∂²f/∂y²)\n\nReturns\n\nIf derivs=0: 3D array of function values (length(x) × length(y) × nqty)\nIf derivs=1: Tuple of (values, xderivatives, yderivatives)\nIf derivs=2: Tuple of (values, xderivatives, yderivatives, xxderivatives, xyderivatives, yy_derivatives)\n\nExamples\n\n# Evaluate at single point\nbcspline = bicube_setup(xs, ys, fs, 1, 1)\nf_vals = bicube_eval(bcspline, π / 2, π / 4)\n\n# Evaluate on grid\nx_eval = collect(range(0, 2π; length=50))\ny_eval = collect(range(0, 2π; length=50))\nf_vals = bicube_eval(bcspline, x_eval, y_eval)\n\n# Get derivatives\nf_vals, fx, fy = bicube_eval(bcspline, x_eval, y_eval, 1)\n\n\n\n\n\n","category":"function"},{"location":"splines/#Example-Usage","page":"Splines","title":"Example Usage","text":"","category":"section"},{"location":"splines/#1D-Cubic-Spline","page":"Splines","title":"1D Cubic Spline","text":"","category":"section"},{"location":"splines/","page":"Splines","title":"Splines","text":"using JPEC\n\n# Create data points\nxs = collect(range(0.0, stop=2π, length=21))\nfs = sin.(xs)\n\n# Set up spline (1 quantity)\nspline = JPEC.SplinesMod.spline_setup(xs, hcat(fs), 1)\n\n# Evaluate at new points\nxs_fine = collect(range(0.0, stop=2π, length=100))\nfs_fine = JPEC.SplinesMod.spline_eval(spline, xs_fine)","category":"page"},{"location":"splines/#2D-Bicubic-Spline","page":"Splines","title":"2D Bicubic Spline","text":"","category":"section"},{"location":"splines/","page":"Splines","title":"Splines","text":"# Create 2D grid\nxs = collect(range(0.0, stop=2π, length=20))\nys = collect(range(0.0, stop=2π, length=20))\n\n# Create 2D function data\nfs = zeros(20, 20, 1)\nfor i in 1:20, j in 1:20\n    fs[i, j, 1] = sin(xs[i]) * cos(ys[j])\nend\n\n# Set up bicubic spline\nbcspline = JPEC.SplinesMod.bicube_setup(xs, ys, fs, 1, 1)\n\n# Evaluate with derivatives\nx_eval, y_eval = π/2, π/4\nf, fx, fy = JPEC.SplinesMod.bicube_eval(bcspline, x_eval, y_eval, 1)","category":"page"},{"location":"vacuum/#Vacuum-Module","page":"Vacuum","title":"Vacuum Module","text":"","category":"section"},{"location":"vacuum/","page":"Vacuum","title":"Vacuum","text":"The Vacuum module provides magnetostatic vacuum field calculations with plasma-wall interactions. Refactored/interfaced from/with VACUUM by M.S. Chance.","category":"page"},{"location":"vacuum/#Overview","page":"Vacuum","title":"Overview","text":"","category":"section"},{"location":"vacuum/","page":"Vacuum","title":"Vacuum","text":"The module includes:","category":"page"},{"location":"vacuum/","page":"Vacuum","title":"Vacuum","text":"Interface to Fortran vacuum field calculations\nJulia refactored version of the VACUUM code","category":"page"},{"location":"vacuum/#API-Reference","page":"Vacuum","title":"API Reference","text":"","category":"section"},{"location":"vacuum/#JPEC.VacuumMod.mscvac","page":"Vacuum","title":"JPEC.VacuumMod.mscvac","text":"mscvac(wv, mpert, mtheta, mthvac, complex_flag, kernelsignin, wall_flag, farwal_flag, grrio, xzptso, op_ahgfile=nothing)\n\nCompute the vacuum response matrix for magnetostatic perturbations.\n\nArguments\n\nwv: Pre-allocated complex matrix (mpert × mpert) to store vacuum response (Array{ComplexF64,2})\nmpert: Number of perturbation modes (Integer)\nmtheta: Number of theta grid points for plasma (Integer)\nmthvac: Number of theta grid points for vacuum region (Integer)\ncomplex_flag: Whether to use complex arithmetic (Bool)\nkernelsignin: Sign convention for vacuum kernels (Float64, typically -1.0)\nwall_flag: Whether to include an externally defined wall shape (Bool)\nfarwal_flag: Whether to use far-wall approximation (Bool)\ngrrio: Green's function data (Array{Float64,2})\nxzptso: Source point coordinates (Array{Float64,2})\nop_ahgfile: Optional communication file for when setdconparams is not called (String or Nothing)\n\nReturns\n\nModifies wv in-place with the computed vacuum response matrix\nReturns the modified wv matrix\n\nNote\n\nRequires prior initialization with set_dcon_params() before calling this function.\n\nExamples\n\n# Initialize parameters first\nset_dcon_params(mthin, lmin, lmax, nnin, qa1in, xin, zin, deltain)\n\n# Set up vacuum calculation\nmpert = 5\nmtheta = 256\nmthvac = 256\nwv = zeros(ComplexF64, mpert, mpert)\ncomplex_flag = true\nkernelsignin = -1.0\nwall_flag = false\nfarwal_flag = true\ngrrio = rand(Float64, 2 * (mthvac + 5), mpert * 2)\nxzptso = rand(Float64, mthvac + 5, 4)\n\n# Perform calculation\nmscvac(wv, mpert, mtheta, mthvac, complex_flag, kernelsignin,\n    wall_flag, farwal_flag, grrio, xzptso)\n\n\n\n\n\n","category":"function"},{"location":"vacuum/#JPEC.VacuumMod.set_dcon_params-Tuple{Integer, Integer, Integer, Integer, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}}","page":"Vacuum","title":"JPEC.VacuumMod.set_dcon_params","text":"set_dcon_params(mthin, lmin, lmax, nnin, qa1in, xin, zin, deltain)\n\nInitialize DCON (Displacement CONtinuum) parameters for vacuum field calculations.\n\nArguments\n\nmthin: Number of theta grid points (Integer)\nlmin: Minimum poloidal mode number (Integer)\nlmax: Maximum poloidal mode number (Integer)\nnnin: Toroidal mode number (Integer)\nqa1in: Safety factor parameter (Float64)\nxin: Vector of radial coordinates at plasma boundary (Vector{Float64})\nzin: Vector of vertical coordinates at plasma boundary (Vector{Float64})\ndeltain: Vector of displacement values (Vector{Float64})\n\nNote\n\nThis function must be called before using mscvac to perform vacuum calculations. The coordinate and displacement vectors should have length lmax - lmin + 1.\n\nExamples\n\nmthin, lmin, lmax, nnin = Int32(4), Int32(1), Int32(4), Int32(2)\nqa1in = 1.23\nn_modes = lmax - lmin + 1\nxin = rand(Float64, n_modes)\nzin = rand(Float64, n_modes)\ndeltain = rand(Float64, n_modes)\n\nset_dcon_params(mthin, lmin, lmax, nnin, qa1in, xin, zin, deltain)\n\n\n\n\n\n","category":"method"},{"location":"vacuum/#Functions","page":"Vacuum","title":"Functions","text":"","category":"section"},{"location":"vacuum/#set*dcon*params","page":"Vacuum","title":"setdconparams","text":"","category":"section"},{"location":"vacuum/#JPEC.VacuumMod.set_dcon_params","page":"Vacuum","title":"JPEC.VacuumMod.set_dcon_params","text":"set_dcon_params(mthin, lmin, lmax, nnin, qa1in, xin, zin, deltain)\n\nInitialize DCON (Displacement CONtinuum) parameters for vacuum field calculations.\n\nArguments\n\nmthin: Number of theta grid points (Integer)\nlmin: Minimum poloidal mode number (Integer)\nlmax: Maximum poloidal mode number (Integer)\nnnin: Toroidal mode number (Integer)\nqa1in: Safety factor parameter (Float64)\nxin: Vector of radial coordinates at plasma boundary (Vector{Float64})\nzin: Vector of vertical coordinates at plasma boundary (Vector{Float64})\ndeltain: Vector of displacement values (Vector{Float64})\n\nNote\n\nThis function must be called before using mscvac to perform vacuum calculations. The coordinate and displacement vectors should have length lmax - lmin + 1.\n\nExamples\n\nmthin, lmin, lmax, nnin = Int32(4), Int32(1), Int32(4), Int32(2)\nqa1in = 1.23\nn_modes = lmax - lmin + 1\nxin = rand(Float64, n_modes)\nzin = rand(Float64, n_modes)\ndeltain = rand(Float64, n_modes)\n\nset_dcon_params(mthin, lmin, lmax, nnin, qa1in, xin, zin, deltain)\n\n\n\n\n\n","category":"function"},{"location":"vacuum/#mscvac","page":"Vacuum","title":"mscvac","text":"","category":"section"},{"location":"vacuum/#JPEC.VacuumMod.mscvac-2","page":"Vacuum","title":"JPEC.VacuumMod.mscvac","text":"mscvac(wv, mpert, mtheta, mthvac, complex_flag, kernelsignin, wall_flag, farwal_flag, grrio, xzptso, op_ahgfile=nothing)\n\nCompute the vacuum response matrix for magnetostatic perturbations.\n\nArguments\n\nwv: Pre-allocated complex matrix (mpert × mpert) to store vacuum response (Array{ComplexF64,2})\nmpert: Number of perturbation modes (Integer)\nmtheta: Number of theta grid points for plasma (Integer)\nmthvac: Number of theta grid points for vacuum region (Integer)\ncomplex_flag: Whether to use complex arithmetic (Bool)\nkernelsignin: Sign convention for vacuum kernels (Float64, typically -1.0)\nwall_flag: Whether to include an externally defined wall shape (Bool)\nfarwal_flag: Whether to use far-wall approximation (Bool)\ngrrio: Green's function data (Array{Float64,2})\nxzptso: Source point coordinates (Array{Float64,2})\nop_ahgfile: Optional communication file for when setdconparams is not called (String or Nothing)\n\nReturns\n\nModifies wv in-place with the computed vacuum response matrix\nReturns the modified wv matrix\n\nNote\n\nRequires prior initialization with set_dcon_params() before calling this function.\n\nExamples\n\n# Initialize parameters first\nset_dcon_params(mthin, lmin, lmax, nnin, qa1in, xin, zin, deltain)\n\n# Set up vacuum calculation\nmpert = 5\nmtheta = 256\nmthvac = 256\nwv = zeros(ComplexF64, mpert, mpert)\ncomplex_flag = true\nkernelsignin = -1.0\nwall_flag = false\nfarwal_flag = true\ngrrio = rand(Float64, 2 * (mthvac + 5), mpert * 2)\nxzptso = rand(Float64, mthvac + 5, 4)\n\n# Perform calculation\nmscvac(wv, mpert, mtheta, mthvac, complex_flag, kernelsignin,\n    wall_flag, farwal_flag, grrio, xzptso)\n\n\n\n\n\n","category":"function"},{"location":"vacuum/#Example-Usage","page":"Vacuum","title":"Example Usage","text":"","category":"section"},{"location":"vacuum/#Basic-Vacuum-Calculation","page":"Vacuum","title":"Basic Vacuum Calculation","text":"","category":"section"},{"location":"vacuum/","page":"Vacuum","title":"Vacuum","text":"using JPEC\n\n# Set DCON parameters\nmthin, lmin, lmax, nnin = Int32(4), Int32(1), Int32(4), Int32(2)\nqa1in = 1.23\nxin = rand(Float64, lmax - lmin + 1)\nzin = rand(Float64, lmax - lmin + 1) \ndeltain = rand(Float64, lmax - lmin + 1)\n\n# Initialize DCON interface\nJPEC.VacuumMod.set_dcon_params(mthin, lmin, lmax, nnin, qa1in, xin, zin, deltain)\n\n# Set up vacuum calculation parameters\nmpert = 5\nmtheta = 256\nmthvac = 256\nwv = zeros(ComplexF64, mpert, mpert)\ncomplex_flag = true\nkernelsignin = -1.0\nwall_flag = false\nfarwal_flag = true\ngrrio = rand(Float64, 2*(mthvac+5), mpert*2)\nxzptso = rand(Float64, mthvac+5, 4)\n\n# Perform vacuum calculation\nJPEC.VacuumMod.mscvac(\n    wv, mpert, mtheta, mthvac,\n    complex_flag, kernelsignin,\n    wall_flag, farwal_flag,\n    grrio, xzptso\n)","category":"page"},{"location":"vacuum/#Notes","page":"Vacuum","title":"Notes","text":"","category":"section"},{"location":"vacuum/","page":"Vacuum","title":"Vacuum","text":"Requires proper initialization of DCON parameters before use\nSupports both complex and real arithmetic depending on the application","category":"page"},{"location":"examples/splines/#Spline-Examples","page":"Spline Examples","title":"Spline Examples","text":"","category":"section"},{"location":"examples/splines/","page":"Spline Examples","title":"Spline Examples","text":"This page demonstrates the usage of the Splines module with practical examples.","category":"page"},{"location":"examples/splines/#1D-Cubic-Spline-Interpolation","page":"Spline Examples","title":"1D Cubic Spline Interpolation","text":"","category":"section"},{"location":"examples/splines/#Basic-Usage","page":"Spline Examples","title":"Basic Usage","text":"","category":"section"},{"location":"examples/splines/","page":"Spline Examples","title":"Spline Examples","text":"using JPEC, Plots\n\n# Create sample data\nxs = collect(range(0.0, stop=2π, length=21))\nfs = sin.(xs)\nfc = cos.(xs)\n\n# Combine into matrix (each column is a different quantity)\nfs_matrix = hcat(fs, fc)\n\n# Set up spline for 2 quantities\nspline = JPEC.SplinesMod.spline_setup(xs, fs_matrix, 2)\n\n# Evaluate on fine grid\nxs_fine = collect(range(0.0, stop=2π, length=100))\nfs_fine = JPEC.SplinesMod.spline_eval(spline, xs_fine)\n\n# Plot results\nplot(xs_fine, fs_fine[:, 1], label=\"sin(x) spline\", legend=:topright)\nplot!(xs_fine, fs_fine[:, 2], label=\"cos(x) spline\")\nscatter!(xs, fs, label=\"sin(x) data\")\nscatter!(xs, fc, label=\"cos(x) data\")","category":"page"},{"location":"examples/splines/#Complex-valued-Splines","page":"Spline Examples","title":"Complex-valued Splines","text":"","category":"section"},{"location":"examples/splines/","page":"Spline Examples","title":"Spline Examples","text":"# Create complex exponential data\nxs = collect(range(0.0, stop=2π, length=20))\nfm = exp.(-im .* xs)  # e^(-ix)\nfp = exp.(im .* xs)   # e^(ix)\n\n# Combine complex data\nfs_matrix = hcat(fm, fp)\n\n# Set up complex spline\nspline = JPEC.SplinesMod.spline_setup(xs, fs_matrix, 2)\n\n# Evaluate\nxs_fine = collect(range(0.0, stop=2π, length=100))\nfs_fine = JPEC.SplinesMod.spline_eval(spline, xs_fine)\n\n# Plot real and imaginary parts\nplot(xs_fine, real.(fs_fine[:, 1]), label=\"Re(e^(-ix))\")\nplot!(xs_fine, imag.(fs_fine[:, 1]), label=\"Im(e^(-ix))\")","category":"page"},{"location":"examples/splines/#2D-Bicubic-Spline-Interpolation","page":"Spline Examples","title":"2D Bicubic Spline Interpolation","text":"","category":"section"},{"location":"examples/splines/#Basic-2D-Function","page":"Spline Examples","title":"Basic 2D Function","text":"","category":"section"},{"location":"examples/splines/","page":"Spline Examples","title":"Spline Examples","text":"using JPEC, Plots\n\n# Create 2D grid\nxs = collect(range(0.0, stop=2π, length=20))\nys = collect(range(0.0, stop=2π, length=20))\n\n# Create 2D function data\nfs1 = sin.(xs') .* cos.(ys) .+ 1.0\nfs2 = cos.(xs') .* sin.(ys) .+ 1.0\n\n# Prepare data array (nx × ny × nquantities)\nfs = zeros(20, 20, 2)\nfs[:, :, 1] = fs1\nfs[:, :, 2] = fs2\n\n# Set up bicubic spline\nbcspline = JPEC.SplinesMod.bicube_setup(xs, ys, fs, 2, 2)\n\n# Evaluate on fine grid\nxs_fine = collect(range(0.0, stop=2π, length=100))\nys_fine = collect(range(0.0, stop=2π, length=100))\nfs_fine = JPEC.SplinesMod.bicube_eval(bcspline, xs_fine, ys_fine)\n\n# Create contour plot\ncontourf(xs_fine, ys_fine, fs_fine[:, :, 1]', \n         title=\"Bicubic Spline: sin(x)cos(y) + 1\")","category":"page"},{"location":"examples/splines/#With-Derivatives","page":"Spline Examples","title":"With Derivatives","text":"","category":"section"},{"location":"examples/splines/","page":"Spline Examples","title":"Spline Examples","text":"# Evaluate with first derivatives\nfs_fine, fsx_fine, fsy_fine = JPEC.SplinesMod.bicube_eval(bcspline, xs_fine, ys_fine, 1)\n\n# Plot function and derivatives\np1 = contourf(xs_fine, ys_fine, fs_fine[:, :, 1]', title=\"f(x,y)\")\np2 = contourf(xs_fine, ys_fine, fsx_fine[:, :, 1]', title=\"∂f/∂x\")\np3 = contourf(xs_fine, ys_fine, fsy_fine[:, :, 1]', title=\"∂f/∂y\")\n\nplot(p1, p2, p3, layout=(1,3), size=(1200, 400))","category":"page"},{"location":"examples/splines/#Equilibrium-Example","page":"Spline Examples","title":"Equilibrium Example","text":"","category":"section"},{"location":"examples/splines/","page":"Spline Examples","title":"Spline Examples","text":"This example shows spline usage with the Solov'ev equilibrium:","category":"page"},{"location":"examples/splines/","page":"Spline Examples","title":"Spline Examples","text":"# Create equilibrium parameters\nkappa = 1.8  # elongation\na = 1.0      # minor radius  \nr0 = 3.5     # major radius\nq0 = 1.25    # safety factor\n\n# Create spatial grid\nmr, mz = 40, 43\nrmin, rmax = r0 - 1.5*a, r0 + 1.5*a\nzmin, zmax = -1.5*kappa*a, 1.5*kappa*a\n\nrs = collect(range(rmin, stop=rmax, length=mr))\nzs = collect(range(zmin, stop=zmax, length=mz))\n\n# Create Solov'ev equilibrium psi field\nf0 = r0 * 1.0  # b0fac = 1.0\npsio = kappa * f0 * a^2 / (2 * q0 * r0)\npsifac = psio / (a*r0)^2\nefac = 1/kappa^2\n\npsifs = zeros(mr, mz, 1)\nfor i in 1:mr, j in 1:mz\n    psifs[i, j, 1] = psio - psifac * (efac * (rs[i] * zs[j])^2 + (rs[i]^2-r0^2)^2/4)\nend\n\n# Set up bicubic spline for psi\npsi_spline = JPEC.SplinesMod.bicube_setup(rs, zs, psifs, 3, 3)\n\n# Evaluate on fine grid for plotting\nrs_fine = collect(range(rmin, stop=rmax, length=110))\nzs_fine = collect(range(zmin, stop=zmax, length=100))\npsi_fine = JPEC.SplinesMod.bicube_eval(psi_spline, rs_fine, zs_fine)\n\n# Create contour plot\ncontourf(rs_fine, zs_fine, psi_fine[:, :, 1]', \n         title=\"Ψ: Solov'ev Equilibrium\", \n         xlabel=\"R\", ylabel=\"Z\",\n         aspect_ratio=:equal)","category":"page"},{"location":"examples/splines/#Performance-Tips","page":"Spline Examples","title":"Performance Tips","text":"","category":"section"},{"location":"examples/splines/","page":"Spline Examples","title":"Spline Examples","text":"Batch evaluations: Evaluate multiple points simultaneously for better performance\nMemory management: Splines should not be re-created frequently; reuse existing spline objects","category":"page"},{"location":"examples/equilibrium/#Equilibrium-Development-Examples","page":"Equilibrium Examples","title":"Equilibrium Development Examples","text":"","category":"section"},{"location":"examples/equilibrium/","page":"Equilibrium Examples","title":"Equilibrium Examples","text":"This page demonstrates equilibrium development and analysis using JPEC, based on the Solov'ev analytical equilibrium.","category":"page"},{"location":"examples/equilibrium/#Equilibrium-Setup","page":"Equilibrium Examples","title":"Equilibrium Setup","text":"","category":"section"},{"location":"examples/equilibrium/#Basic-Data-Structures","page":"Equilibrium Examples","title":"Basic Data Structures","text":"","category":"section"},{"location":"examples/vacuum/#Vacuum-Examples","page":"Vacuum Examples","title":"Vacuum Examples","text":"","category":"section"},{"location":"examples/vacuum/","page":"Vacuum Examples","title":"Vacuum Examples","text":"This page demonstrates the usage of the Vacuum module for magnetostatic calculations.","category":"page"},{"location":"examples/vacuum/#Basic-Vacuum-Field-Calculation","page":"Vacuum Examples","title":"Basic Vacuum Field Calculation","text":"","category":"section"},{"location":"examples/vacuum/#Setting-up-DCON-Parameters","page":"Vacuum Examples","title":"Setting up DCON Parameters","text":"","category":"section"},{"location":"examples/vacuum/","page":"Vacuum Examples","title":"Vacuum Examples","text":"The vacuum module requires initialization with DCON (Displacement CONtinuum) parameters:","category":"page"},{"location":"examples/vacuum/","page":"Vacuum Examples","title":"Vacuum Examples","text":"using JPEC\n\n# Define DCON parameters\nmthin = Int32(4)     # Number of theta points\nlmin = Int32(1)      # Minimum poloidal mode number\nlmax = Int32(4)      # Maximum poloidal mode number\nnnin = Int32(2)      # Toroidal mode number\nqa1in = 1.23         # Safety factor parameter\n\n# Create geometry arrays\nn_modes = lmax - lmin + 1\nxin = rand(Float64, n_modes)      # Radial coordinates\nzin = rand(Float64, n_modes)      # Vertical coordinates  \ndeltain = rand(Float64, n_modes)  # Displacement data\n\n# Initialize DCON interface\nJPEC.VacuumMod.set_dcon_params(mthin, lmin, lmax, nnin, qa1in, xin, zin, deltain)","category":"page"},{"location":"examples/vacuum/#Vacuum-Matrix-Calculation","page":"Vacuum Examples","title":"Vacuum Matrix Calculation","text":"","category":"section"},{"location":"examples/vacuum/","page":"Vacuum Examples","title":"Vacuum Examples","text":"# Set up vacuum calculation parameters\nmpert = 5              # Number of perturbation modes\nmtheta = 256           # Number of theta points for plasma\nmthvac = 256           # Number of theta points for vacuum\n\n# Initialize result matrix\nwv = zeros(ComplexF64, mpert, mpert)\n\n# Calculation flags\ncomplex_flag = true     # Use complex arithmetic\nkernelsignin = -1.0    # Kernel sign \nwall_flag = false      # Include wall effects\nfarwal_flag = true     # Far wall approximation\n\n# Geometry and source data\ngrrio = rand(Float64, 2*(mthvac+5), mpert*2)  # Geometry data\nxzptso = rand(Float64, mthvac+5, 4)           # Source points\n\n# Perform vacuum matrix calculation\nJPEC.VacuumMod.mscvac(\n    wv, mpert, mtheta, mthvac,\n    complex_flag, kernelsignin,\n    wall_flag, farwal_flag,\n    grrio, xzptso\n)\n\nprintln(\"Vacuum matrix calculation completed\")\nprintln(\"Result matrix dimensions: \", size(wv))","category":"page"},{"location":"examples/vacuum/#Analyzing-Results","page":"Vacuum Examples","title":"Analyzing Results","text":"","category":"section"},{"location":"examples/vacuum/","page":"Vacuum Examples","title":"Vacuum Examples","text":"using Plots\n\n# Plot magnitude of vacuum matrix elements\nheatmap(abs.(wv), \n        title=\"Vacuum Matrix |W| Elements\",\n        xlabel=\"Mode j\", \n        ylabel=\"Mode i\",\n        color=:plasma)\n\n# Plot phase information\nheatmap(angle.(wv), \n        title=\"Vacuum Matrix Phase\",\n        xlabel=\"Mode j\",\n        ylabel=\"Mode i\", \n        color=:phase)","category":"page"},{"location":"examples/vacuum/#Advanced-Usage","page":"Vacuum Examples","title":"Advanced Usage","text":"","category":"section"},{"location":"examples/vacuum/#Including-Wall-Effects","page":"Vacuum Examples","title":"Including Wall Effects","text":"","category":"section"},{"location":"examples/vacuum/","page":"Vacuum Examples","title":"Vacuum Examples","text":"# Enable wall calculations\nwall_flag = true\nfarwal_flag = false  # Do not use far wall approximation\n\n# Additional wall parameters might be needed\n# (specific implementation depends on geometry)\n\nJPEC.VacuumMod.mscvac(\n    wv, mpert, mtheta, mthvac,\n    complex_flag, kernelsignin,\n    wall_flag, farwal_flag,\n    grrio, xzptso\n)","category":"page"},{"location":"examples/vacuum/#Multi-mode-Analysis","page":"Vacuum Examples","title":"Multi-mode Analysis","text":"","category":"section"},{"location":"examples/vacuum/","page":"Vacuum Examples","title":"Vacuum Examples","text":"# Analyze eigenvalues of vacuum matrix\nusing LinearAlgebra\n\neigenvals = eigvals(wv)\neigenvecs = eigvecs(wv)\n\n# Plot eigenvalue spectrum\nscatter(real.(eigenvals), imag.(eigenvals),\n        title=\"Vacuum Matrix Eigenvalues\",\n        xlabel=\"Real part\",\n        ylabel=\"Imaginary part\",\n        legend=false)\n\n# Identify most unstable mode\nmax_growth_idx = argmax(imag.(eigenvals))\nprintln(\"Most unstable eigenvalue: \", eigenvals[max_growth_idx])","category":"page"},{"location":"examples/vacuum/#Coupling-with-Equilibrium-Data","page":"Vacuum Examples","title":"Coupling with Equilibrium Data","text":"","category":"section"},{"location":"examples/vacuum/","page":"Vacuum Examples","title":"Vacuum Examples","text":"# This example shows how vacuum calculations integrate with equilibrium\n\n# 1. Set up equilibrium (using spline example from equilibrium page)\n# ... equilibrium setup code ...\n\n# 2. Extract boundary data for vacuum calculation\n# boundary_data = extract_boundary(psi_spline, flux_surface)\n\n# 3. Convert to DCON format\n# xin, zin, deltain = process_boundary_data(boundary_data)\n\n# 4. Perform vacuum calculation\n# JPEC.VacuumMod.set_dcon_params(mthin, lmin, lmax, nnin, qa1in, xin, zin, deltain)\n# ... vacuum calculation ...\n\n# 5. Analyze stability\n# stability_analysis(wv, eigenvals)","category":"page"},{"location":"examples/vacuum/#Troubleshooting","page":"Vacuum Examples","title":"Troubleshooting","text":"","category":"section"},{"location":"examples/vacuum/#Common-Issues","page":"Vacuum Examples","title":"Common Issues","text":"","category":"section"},{"location":"examples/vacuum/","page":"Vacuum Examples","title":"Vacuum Examples","text":"Initialization Error: Ensure set_dcon_params is called before mscvac\nMemory Issues: Large mtheta/mthvac values require significant memory\nConvergence: Check that geometry arrays are properly normalized\nComplex Arithmetic: Ensure complex_flag=true for stability analysis","category":"page"},{"location":"examples/vacuum/#Performance-Optimization","page":"Vacuum Examples","title":"Performance Optimization","text":"","category":"section"},{"location":"examples/vacuum/","page":"Vacuum Examples","title":"Vacuum Examples","text":"# For large problems, consider:\n# - Reducing mtheta/mthvac if possible\n# - Using real arithmetic (complex_flag=false) when appropriate  \n# - Parallelization (if available in Fortran backend)\n\n# Monitor memory usage\nusing Pkg\nPkg.add(\"BenchmarkTools\")\nusing BenchmarkTools\n\n@time JPEC.VacuumMod.mscvac(wv, mpert, mtheta, mthvac, \n                           complex_flag, kernelsignin,\n                           wall_flag, farwal_flag,\n                           grrio, xzptso)","category":"page"},{"location":"#JPEC.jl","page":"Home","title":"JPEC.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia implementation of the Generalized Perturbed Equilibrium Code suite","category":"page"},{"location":"","page":"Home","title":"Home","text":"JPEC.jl is a work-in-progress Julia port of the Generalized Perturbed Equilibrium Code (GPEC) suite, providing tools for magnetohydrodynamic (MHD) equilibrium and stability analysis in fusion plasmas.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"JPEC provides functionality for:","category":"page"},{"location":"","page":"Home","title":"Home","text":"some stuff Fill this in later","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"JPEC\")","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using JPEC\n\n# Great question","category":"page"},{"location":"#Modules","page":"Home","title":"Modules","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"splines.md\", \"vacuum.md\"]\nDepth = 1","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package includes several Jupyter notebook examples:","category":"page"},{"location":"","page":"Home","title":"Home","text":"example.ipynb: Fill this in later","category":"page"},{"location":"#Developer-Notes","page":"Home","title":"Developer Notes","text":"","category":"section"},{"location":"#Commit-Messages","page":"Home","title":"Commit Messages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To assist with release note compilation, please follow the commit message format:","category":"page"},{"location":"","page":"Home","title":"Home","text":"CODE - TAG - Detailed message","category":"page"},{"location":"","page":"Home","title":"Home","text":"where CODE is EQUIL, DCON, VAC, etc. and TAGs are descriptors like WIP, MINOR, IMPROVEMENT, BUG FIX, NEW FEATURE, etc.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Additionally, please see this google doc for more details on using the GitHub.","category":"page"},{"location":"#Links","page":"Home","title":"Links","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Source Repository\nOriginal GPEC","category":"page"}]
}
